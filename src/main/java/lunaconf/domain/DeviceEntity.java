/* This code was generated by Akka Serverless tooling.
 * As long as this file exists it will not be re-generated.
 * You are free to make changes to this file.
 */
package lunaconf.domain;

import com.akkaserverless.javasdk.eventsourcedentity.EventSourcedEntity;
import com.akkaserverless.javasdk.eventsourcedentity.EventSourcedEntity.Effect;
import com.akkaserverless.javasdk.eventsourcedentity.EventSourcedEntityContext;
import com.google.protobuf.Empty;
import lunaconf.api.DeviceApi;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/** An event sourced entity. */
public class DeviceEntity extends AbstractDeviceEntity {

  @SuppressWarnings("unused")
  private final String entityId;
  private static Logger log = LoggerFactory.getLogger(DeviceEntity.class);

  public DeviceEntity(EventSourcedEntityContext context) {
    this.entityId = context.entityId();
  }

  @Override
  public DeviceDomain.DeviceState emptyState() {
    return DeviceDomain.DeviceState.getDefaultInstance();
  }

  @Override
  public Effect<Empty> createDevice(DeviceDomain.DeviceState currentState, DeviceApi.CreateDeviceRequest createDeviceRequest) {
    DeviceDomain.DeviceCreated event = DeviceDomain.DeviceCreated.newBuilder().setDeviceId(createDeviceRequest.getDeviceId()).build();
    return effects().emitEvent(event).thenReply(__ -> Empty.getDefaultInstance());
  }

  @Override
  public Effect<Empty> activateDevice(DeviceDomain.DeviceState currentState, DeviceApi.ActivateDeviceRequest activateDeviceRequest) {
    if (currentState.equals(DeviceDomain.DeviceState.getDefaultInstance()))
      return effects().error("Device does not exist. It needs to be created first!");

    if (currentState.getCustomerId().isEmpty()) {
      DeviceDomain.DeviceActivated event = DeviceDomain.DeviceActivated.newBuilder().setDeviceId(activateDeviceRequest.getDeviceId()).setCustomerId(activateDeviceRequest.getCustomerId()).build();
      return effects().emitEvent(event).thenReply(__ -> Empty.getDefaultInstance());
    }
    if (currentState.getCustomerId().equals(activateDeviceRequest.getCustomerId()))
      return effects().reply(Empty.getDefaultInstance());
    else
      return effects().error("Device already activated with other customer!");

  }

  @Override
  public Effect<Empty> switchOnDevice(DeviceDomain.DeviceState currentState, DeviceApi.SwitchOnDeviceRequest switchOnDeviceRequest) {

    if (currentState.equals(DeviceDomain.DeviceState.getDefaultInstance()))
      return effects().error("Device does not exist. It needs to be created first!");

    if(currentState.getCustomerId().isEmpty())
      return effects().error("Device not activated!");
    if (currentState.getDeviceOn())
      return effects().reply(Empty.getDefaultInstance());//already on

    DeviceDomain.DeviceSwitchedOn event = DeviceDomain.DeviceSwitchedOn.newBuilder().setDeviceId(switchOnDeviceRequest.getDeviceId()).build();
    return effects().emitEvent(event).thenReply(__ -> Empty.getDefaultInstance());

  }

  @Override
  public Effect<Empty> switchOffDevice(DeviceDomain.DeviceState currentState, DeviceApi.SwitchOffDeviceRequest switchOffDeviceRequest) {
    if (currentState.equals(DeviceDomain.DeviceState.getDefaultInstance()))
      return effects().error("Device does not exit. It needs to be created first!");

    if(currentState.getCustomerId().isEmpty())
      return effects().error("Device not activated!");

    if (!currentState.getDeviceOn())
      return effects().reply(Empty.getDefaultInstance());//already off

    DeviceDomain.DeviceSwitchedOff event = DeviceDomain.DeviceSwitchedOff.newBuilder().setDeviceId(switchOffDeviceRequest.getDeviceId()).build();
    return effects().emitEvent(event).thenReply(__ -> Empty.getDefaultInstance());

  }

  @Override
  public Effect<DeviceApi.Device> getDevice(DeviceDomain.DeviceState currentState, DeviceApi.GetDeviceRequest getDeviceRequest) {
    if (currentState.equals(DeviceDomain.DeviceState.getDefaultInstance())) {
      return effects().error("Device does not exit. It needs to be created first!");
    } else {
      DeviceApi.Device device = DeviceApi.Device.newBuilder().setDeviceId(getDeviceRequest.getDeviceId()).setCustomerId(currentState.getCustomerId()).setDeviceOn(currentState.getDeviceOn()).build();
      return effects().reply(device);
    }
  }

  @Override
  public DeviceDomain.DeviceState deviceCreated(DeviceDomain.DeviceState currentState, DeviceDomain.DeviceCreated deviceCreated) {
    return DeviceDomain.DeviceState.newBuilder().setDeviceId(deviceCreated.getDeviceId()).setDeviceOn(false).build();
  }
  @Override
  public DeviceDomain.DeviceState deviceActivated(DeviceDomain.DeviceState currentState, DeviceDomain.DeviceActivated deviceActivated) {
    return currentState.toBuilder().setCustomerId(deviceActivated.getCustomerId()).build();
  }
  @Override
  public DeviceDomain.DeviceState deviceSwitchedOn(DeviceDomain.DeviceState currentState, DeviceDomain.DeviceSwitchedOn deviceSwitchedOn) {
    return currentState.toBuilder().setDeviceOn(true).build();
  }
  @Override
  public DeviceDomain.DeviceState deviceSwitchedOff(DeviceDomain.DeviceState currentState, DeviceDomain.DeviceSwitchedOff deviceSwitchedOff) {
    return currentState.toBuilder().setDeviceOn(false).build();
  }

}