/* This code was generated by Akka Serverless tooling.
 * As long as this file exists it will not be re-generated.
 * You are free to make changes to this file.
 */
package lunaconf.domain;

import akka.actor.ActorSystem;
import akka.stream.javadsl.Sink;
import akka.stream.javadsl.Source;
import com.akkaserverless.javasdk.testkit.junit.AkkaServerlessTestkitResource;
import com.github.dockerjava.api.model.Device;
import com.google.protobuf.Empty;
import lunaconf.Main;
import lunaconf.api.DeviceApi;
import lunaconf.api.DeviceServiceClient;
import lunaconf.view.DeviceByActiveStatusClient;
import lunaconf.view.DeviceByCustomerClient;
import lunaconf.view.DeviceViewModel;
import org.junit.ClassRule;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.UUID;
import java.util.concurrent.ExecutionException;

import static java.util.concurrent.TimeUnit.*;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThrows;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertFalse;

// Example of an integration test calling our service via the Akka Serverless proxy
// Run all test classes ending with "IntegrationTest" using `mvn verify -Pit`
public class DeviceEntityIntegrationTest {

  private static Logger log = LoggerFactory.getLogger(DeviceEntityIntegrationTest.class);

  /**
   * The test kit starts both the service container and the Akka Serverless proxy.
   */
  @ClassRule
  public static final AkkaServerlessTestkitResource testkit =
    new AkkaServerlessTestkitResource(Main.createAkkaServerless());

  /**
   * Use the generated gRPC client to call the service through the Akka Serverless proxy.
   */
  private final ActorSystem system;
  private final DeviceServiceClient client;
  private final DeviceByActiveStatusClient viewByActiveStatusClient;
  private final DeviceByCustomerClient viewByCustomerClient;


  public DeviceEntityIntegrationTest() {
    system = testkit.getActorSystem();
    client = DeviceServiceClient.create(testkit.getGrpcClientSettings(), testkit.getActorSystem());
    viewByActiveStatusClient = DeviceByActiveStatusClient.create(testkit.getGrpcClientSettings(),testkit.getActorSystem());
    viewByCustomerClient = DeviceByCustomerClient.create(testkit.getGrpcClientSettings(),testkit.getActorSystem());
  }

  @Test
  public void createDevice() throws Exception {
    String deviceId = UUID.randomUUID().toString();
    createDevice(deviceId);
    assertTrue(isInNotActiveByStatusView(deviceId));
  }

  @Test
  public void createDeviceOnCreatedEntity() throws Exception {
    String deviceId = UUID.randomUUID().toString();
    createDevice(deviceId);
    createDevice(deviceId);
  }

  @Test
  public void activateDeviceOnNonCreatedDevice() throws Exception {
    String deviceId = UUID.randomUUID().toString();
    String customerId = UUID.randomUUID().toString();
    Exception exception = assertThrows(ExecutionException.class, () -> client.activateDevice(DeviceApi.ActivateDeviceRequest.newBuilder().setDeviceId(deviceId).setCustomerId(customerId).build()).toCompletableFuture().get(2, SECONDS));
    assertTrue(exception.getCause().getMessage().contains("Device does not exist. It needs to be created first!"));

  }

  @Test
  public void activateDevice() throws Exception {
    String deviceId = UUID.randomUUID().toString();
    String customerId = UUID.randomUUID().toString();
    createDevice(deviceId);
    activateDevice(deviceId,customerId);
  }

  @Test
  public void activateDeviceOnAlreadyActiveDeviceTheSameCustomer() throws Exception {
    String deviceId = UUID.randomUUID().toString();
    String customerId = UUID.randomUUID().toString();
    createDevice(deviceId);
    activateDevice(deviceId,customerId);
    activateDevice(deviceId,customerId);

  }

  @Test
  public void activateDeviceOnAlreadyActiveDeviceDifferentCustomer() throws Exception {
    String deviceId = UUID.randomUUID().toString();
    String customerId = UUID.randomUUID().toString();
    String otherCustomerId = customerId+"-other";
    createDevice(deviceId);
    activateDevice(deviceId,customerId);
    Exception exception = assertThrows(ExecutionException.class, () -> client.activateDevice(DeviceApi.ActivateDeviceRequest.newBuilder().setDeviceId(deviceId).setCustomerId(otherCustomerId).build()).toCompletableFuture().get(2, SECONDS));
    assertTrue(exception.getCause().getMessage().contains("Device already activated with other customer!"));

  }

  @Test
  public void switchOnDeviceOnNonCreatedEntity() throws Exception {
    String deviceId = UUID.randomUUID().toString();
    Exception exception = assertThrows(ExecutionException.class, () -> client.switchOnDevice(DeviceApi.SwitchOnDeviceRequest.newBuilder().setDeviceId(deviceId).build()).toCompletableFuture().get(2, SECONDS));
    assertTrue(exception.getCause().getMessage().contains("Device does not exist. It needs to be created first!"));

  }

  @Test
  public void switchOnDeviceOnNonActiveDevice() throws Exception {
    String deviceId = UUID.randomUUID().toString();
    createDevice(deviceId);
    Exception exception = assertThrows(ExecutionException.class, () -> client.switchOnDevice(DeviceApi.SwitchOnDeviceRequest.newBuilder().setDeviceId(deviceId).build()).toCompletableFuture().get(2, SECONDS));
    assertTrue(exception.getCause().getMessage().contains("Device not activated!"));

  }

  @Test
  public void switchOnDevice() throws Exception {
    String deviceId = UUID.randomUUID().toString();
    String customerId = UUID.randomUUID().toString();
    createDevice(deviceId);
    activateDevice(deviceId,customerId);
    switchOnDevice(deviceId);

  }

  @Test
  public void switchOnDeviceAlreadyOn() throws Exception {
    String deviceId = UUID.randomUUID().toString();
    String customerId = UUID.randomUUID().toString();
    createDevice(deviceId);
    activateDevice(deviceId,customerId);
    switchOnDevice(deviceId);
    switchOnDevice(deviceId);

  }

  @Test
  public void switchOffDeviceOnNonCreatedEntity() throws Exception {
    String deviceId = UUID.randomUUID().toString();
    String customerId = UUID.randomUUID().toString();
    Exception exception = assertThrows(ExecutionException.class, () -> client.switchOffDevice(DeviceApi.SwitchOffDeviceRequest.newBuilder().setDeviceId(deviceId).build()).toCompletableFuture().get(2, SECONDS));
    assertTrue(exception.getCause().getMessage().contains("Device does not exit. It needs to be created first!"));

  }

  @Test
  public void switchOffDeviceOnNonActiveDevice() throws Exception {
    String deviceId = UUID.randomUUID().toString();
    String customerId = UUID.randomUUID().toString();
    createDevice(deviceId);
    Exception exception = assertThrows(ExecutionException.class, () -> client.switchOffDevice(DeviceApi.SwitchOffDeviceRequest.newBuilder().setDeviceId(deviceId).build()).toCompletableFuture().get(2, SECONDS));
    assertTrue(exception.getCause().getMessage().contains("Device not activated!"));

  }

  @Test
  public void switchOffDevice() throws Exception {
    String deviceId = UUID.randomUUID().toString();
    String customerId = UUID.randomUUID().toString();
    createDevice(deviceId);
    activateDevice(deviceId,customerId);
    switchOnDevice(deviceId);
    switchOffDevice(deviceId);

  }

  @Test
  public void switchOffDeviceAlreadyOff() throws Exception {
    String deviceId = UUID.randomUUID().toString();
    String customerId = UUID.randomUUID().toString();
    createDevice(deviceId);
    activateDevice(deviceId,customerId);
    switchOffDevice(deviceId);
  }


  private void createDevice(String deviceId)throws Exception {
    client.createDevice(DeviceApi.CreateDeviceRequest.newBuilder().setDeviceId(deviceId).build()).toCompletableFuture().get(2, SECONDS);
    DeviceApi.Device device = client.getDevice(DeviceApi.GetDeviceRequest.newBuilder().setDeviceId(deviceId).build()).toCompletableFuture().get(2,SECONDS);
    assertEquals(deviceId,device.getDeviceId());
    assertFalse(device.getDeviceOn());
    //assertTrue(isInNotActiveByStatusView(deviceId));

  }

  private void activateDevice(String deviceId, String customerId)throws Exception{
    client.activateDevice(DeviceApi.ActivateDeviceRequest.newBuilder().setDeviceId(deviceId).setCustomerId(customerId).build()).toCompletableFuture().get(2, SECONDS);
    DeviceApi.Device device = client.getDevice(DeviceApi.GetDeviceRequest.newBuilder().setDeviceId(deviceId).build()).toCompletableFuture().get(2,SECONDS);
    assertEquals(deviceId,device.getDeviceId());
    assertEquals(customerId,device.getCustomerId());
    assertFalse(device.getDeviceOn());
    //assertFalse(isInNotActiveByStatusView(deviceId));
    assertTrue(isInByCustomerView(deviceId,customerId));
  }

  private void switchOnDevice(String deviceId) throws Exception{
    client.switchOnDevice(DeviceApi.SwitchOnDeviceRequest.newBuilder().setDeviceId(deviceId).build()).toCompletableFuture().get(3,SECONDS);
    DeviceApi.Device device = client.getDevice(DeviceApi.GetDeviceRequest.newBuilder().setDeviceId(deviceId).build()).toCompletableFuture().get(2,SECONDS);
    assertEquals(deviceId,device.getDeviceId());
    assertTrue(device.getDeviceOn());
  }

  private void switchOffDevice(String deviceId)throws Exception{
    client.switchOffDevice(DeviceApi.SwitchOffDeviceRequest.newBuilder().setDeviceId(deviceId).build()).toCompletableFuture().get(3,SECONDS);
    DeviceApi.Device device = client.getDevice(DeviceApi.GetDeviceRequest.newBuilder().setDeviceId(deviceId).build()).toCompletableFuture().get(2,SECONDS);
    assertEquals(deviceId,device.getDeviceId());
    assertFalse(device.getDeviceOn());
  }

  private boolean isInNotActiveByStatusView(String deviceId) throws Exception{
    Thread.sleep(1000);
    Source<DeviceViewModel.DeviceByActiveStatusView,?> resultSource = viewByActiveStatusClient.getDevicesByActiveStatus(DeviceViewModel.ByActiveStatusRequest.newBuilder().setActive(false).build());
    List<DeviceViewModel.DeviceByActiveStatusView> devices = resultSource.runWith(Sink.seq(),system).toCompletableFuture().get(3,SECONDS);
    devices.stream().forEach(d->log.info("not active device: {}",d.getDeviceId()));
    return devices.stream().filter(d->d.getDeviceId().equals(deviceId)).count() == 1;
  }

  private boolean isInByCustomerView(String deviceId, String customerId) throws Exception{
    Thread.sleep(1000);
    Source<DeviceViewModel.DeviceByCustomerView,?> resultSource = viewByCustomerClient.getDevicesByCustomer(DeviceViewModel.ByCustomerRequest.newBuilder().setCustomerId(customerId).build());
    List<DeviceViewModel.DeviceByCustomerView> devices = resultSource.runWith(Sink.seq(),system).toCompletableFuture().get(3,SECONDS);
    return devices.stream().filter(d->d.getDeviceId().equals(deviceId)).count() == 1;
  }

}