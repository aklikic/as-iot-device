/* This code was generated by Akka Serverless tooling.
 * As long as this file exists it will not be re-generated.
 * You are free to make changes to this file.
 */
package lunaconf.domain;

import com.akkaserverless.javasdk.eventsourcedentity.EventSourcedEntity;
import com.akkaserverless.javasdk.eventsourcedentity.EventSourcedEntityContext;
import com.akkaserverless.javasdk.testkit.EventSourcedResult;
import com.google.protobuf.Empty;
import java.util.ArrayList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.UUID;
import java.util.concurrent.ExecutionException;

import lunaconf.api.DeviceApi;
import org.junit.Test;
import scala.jdk.javaapi.CollectionConverters;

import static java.util.concurrent.TimeUnit.SECONDS;
import static org.junit.Assert.*;

public class DeviceEntityTest {

  @Test
  public void createDevice(){
    DeviceEntityTestKit testKit = DeviceEntityTestKit.of(DeviceEntity::new);

    String deviceId = UUID.randomUUID().toString();

    createDevice(testKit,deviceId);
  }

  @Test
  public void createDeviceOnCreatedEntity() throws Exception {
    DeviceEntityTestKit testKit = DeviceEntityTestKit.of(DeviceEntity::new);

    String deviceId = UUID.randomUUID().toString();

    createDevice(testKit,deviceId);
    createDevice(testKit,deviceId);

  }

  @Test
  public void activateDeviceOnNonCreatedDevice() throws Exception {
    DeviceEntityTestKit testKit = DeviceEntityTestKit.of(DeviceEntity::new);

    String deviceId = UUID.randomUUID().toString();
    String customerId = UUID.randomUUID().toString();

    EventSourcedResult<Empty> result = testKit.activateDevice(DeviceApi.ActivateDeviceRequest.newBuilder().setDeviceId(deviceId).setCustomerId(customerId).build());
    assertEquals("Device does not exist. It needs to be created first!",result.getError());

  }

  @Test
  public void activateDevice() throws Exception {
    DeviceEntityTestKit testKit = DeviceEntityTestKit.of(DeviceEntity::new);

    String deviceId = UUID.randomUUID().toString();
    String customerId = UUID.randomUUID().toString();

    createDevice(testKit,deviceId);
    activateDevice(testKit,deviceId,customerId);
  }

  @Test
  public void activateDeviceOnAlreadyActiveDeviceTheSameCustomer() throws Exception {
    DeviceEntityTestKit testKit = DeviceEntityTestKit.of(DeviceEntity::new);

    String deviceId = UUID.randomUUID().toString();
    String customerId = UUID.randomUUID().toString();

    createDevice(testKit,deviceId);
    activateDevice(testKit,deviceId,customerId);
    EventSourcedResult<Empty> result = testKit.activateDevice(DeviceApi.ActivateDeviceRequest.newBuilder().setDeviceId(deviceId).setCustomerId(customerId).build());
    assertFalse(result.didEmitEvents());

  }

  @Test
  public void activateDeviceOnAlreadyActiveDeviceDifferentCustomer() throws Exception {
    DeviceEntityTestKit testKit = DeviceEntityTestKit.of(DeviceEntity::new);

    String deviceId = UUID.randomUUID().toString();
    String customerId = UUID.randomUUID().toString();
    String otherCustomerId = customerId+"-other";

    createDevice(testKit,deviceId);
    activateDevice(testKit,deviceId,customerId);
    EventSourcedResult<Empty> result = testKit.activateDevice(DeviceApi.ActivateDeviceRequest.newBuilder().setDeviceId(deviceId).setCustomerId(otherCustomerId).build());
    assertEquals("Device already activated with other customer!",result.getError());


  }

  @Test
  public void switchOnDeviceOnNonCreatedEntity() throws Exception {
    DeviceEntityTestKit testKit = DeviceEntityTestKit.of(DeviceEntity::new);

    String deviceId = UUID.randomUUID().toString();

    EventSourcedResult<Empty> result = testKit.switchOnDevice(DeviceApi.SwitchOnDeviceRequest.newBuilder().setDeviceId(deviceId).build());
    assertEquals("Device does not exist. It needs to be created first!",result.getError());

  }

  @Test
  public void switchOnDeviceOnNonActiveDevice() throws Exception {
    DeviceEntityTestKit testKit = DeviceEntityTestKit.of(DeviceEntity::new);

    String deviceId = UUID.randomUUID().toString();

    createDevice(testKit,deviceId);

    EventSourcedResult<Empty> result = testKit.switchOnDevice(DeviceApi.SwitchOnDeviceRequest.newBuilder().setDeviceId(deviceId).build());
    assertEquals("Device not activated!",result.getError());


  }

  @Test
  public void switchOnDevice() throws Exception {
    DeviceEntityTestKit testKit = DeviceEntityTestKit.of(DeviceEntity::new);

    String deviceId = UUID.randomUUID().toString();
    String customerId = UUID.randomUUID().toString();

    createDevice(testKit,deviceId);
    activateDevice(testKit,deviceId,customerId);
    switchOnDevice(testKit,deviceId,customerId);

  }

  @Test
  public void switchOnDeviceAlreadyOn() throws Exception {
    DeviceEntityTestKit testKit = DeviceEntityTestKit.of(DeviceEntity::new);

    String deviceId = UUID.randomUUID().toString();
    String customerId = UUID.randomUUID().toString();
    createDevice(testKit,deviceId);
    activateDevice(testKit,deviceId,customerId);
    switchOnDevice(testKit,deviceId,customerId);

    EventSourcedResult<Empty> result = testKit.switchOnDevice(DeviceApi.SwitchOnDeviceRequest.newBuilder().setDeviceId(deviceId).build());
    assertFalse(result.didEmitEvents());

  }

  @Test
  public void switchOffDeviceOnNonCreatedEntity() throws Exception {
    DeviceEntityTestKit testKit = DeviceEntityTestKit.of(DeviceEntity::new);

    String deviceId = UUID.randomUUID().toString();

    EventSourcedResult<Empty> result = testKit.switchOffDevice(DeviceApi.SwitchOffDeviceRequest.newBuilder().setDeviceId(deviceId).build());
    assertEquals("Device does not exist. It needs to be created first!",result.getError());

  }

  @Test
  public void switchOffDeviceOnNonActiveDevice() throws Exception {
    DeviceEntityTestKit testKit = DeviceEntityTestKit.of(DeviceEntity::new);

    String deviceId = UUID.randomUUID().toString();

    createDevice(testKit,deviceId);

    EventSourcedResult<Empty> result = testKit.switchOffDevice(DeviceApi.SwitchOffDeviceRequest.newBuilder().setDeviceId(deviceId).build());
    assertEquals("Device not activated!",result.getError());

  }

  @Test
  public void switchOffDevice() throws Exception {
    DeviceEntityTestKit testKit = DeviceEntityTestKit.of(DeviceEntity::new);

    String deviceId = UUID.randomUUID().toString();
    String customerId = UUID.randomUUID().toString();

    createDevice(testKit,deviceId);
    activateDevice(testKit,deviceId,customerId);
    switchOnDevice(testKit,deviceId,customerId);
    switchOffDevice(testKit,deviceId,customerId);

  }

  @Test
  public void switchOffDeviceAlreadyOff() throws Exception {
    DeviceEntityTestKit testKit = DeviceEntityTestKit.of(DeviceEntity::new);

    String deviceId = UUID.randomUUID().toString();
    String customerId = UUID.randomUUID().toString();

    createDevice(testKit,deviceId);
    activateDevice(testKit,deviceId,customerId);
    switchOnDevice(testKit,deviceId,customerId);
    switchOffDevice(testKit,deviceId,customerId);

    EventSourcedResult<Empty> result = testKit.switchOffDevice(DeviceApi.SwitchOffDeviceRequest.newBuilder().setDeviceId(deviceId).build());
    assertFalse(result.didEmitEvents());
  }


  private void createDevice(DeviceEntityTestKit testKit,String deviceId){
    EventSourcedResult<Empty> result = testKit.createDevice(DeviceApi.CreateDeviceRequest.newBuilder().setDeviceId(deviceId).build());

    DeviceDomain.DeviceCreated expectedEvent =  DeviceDomain.DeviceCreated.newBuilder().setDeviceId(deviceId).build();
    DeviceDomain.DeviceCreated event = result.getNextEventOfType(DeviceDomain.DeviceCreated.class);
    assertEquals(expectedEvent,event);

    DeviceDomain.DeviceState expectedState = DeviceDomain.DeviceState.newBuilder().setDeviceId(deviceId).build();
    assertEquals(expectedState,testKit.getState());
  }

  private void activateDevice(DeviceEntityTestKit testKit,String deviceId, String customerId){
    EventSourcedResult<Empty> result = testKit.activateDevice(DeviceApi.ActivateDeviceRequest.newBuilder().setDeviceId(deviceId).setCustomerId(customerId).build());

    DeviceDomain.DeviceActivated expectedEvent =  DeviceDomain.DeviceActivated.newBuilder().setDeviceId(deviceId).setCustomerId(customerId).build();
    DeviceDomain.DeviceActivated event = result.getNextEventOfType(DeviceDomain.DeviceActivated.class);
    assertEquals(expectedEvent,event);

    DeviceDomain.DeviceState expectedState = DeviceDomain.DeviceState.newBuilder().setDeviceId(deviceId).setCustomerId(customerId).build();
    assertEquals(expectedState,testKit.getState());
  }

  private void switchOnDevice(DeviceEntityTestKit testKit,String deviceId, String customerId){
    EventSourcedResult<Empty> result = testKit.switchOnDevice(DeviceApi.SwitchOnDeviceRequest.newBuilder().setDeviceId(deviceId).build());

    DeviceDomain.DeviceSwitchedOn expectedEvent =  DeviceDomain.DeviceSwitchedOn.newBuilder().setDeviceId(deviceId).build();
    DeviceDomain.DeviceSwitchedOn event = result.getNextEventOfType(DeviceDomain.DeviceSwitchedOn.class);
    assertEquals(expectedEvent,event);

    DeviceDomain.DeviceState expectedState = DeviceDomain.DeviceState.newBuilder().setDeviceId(deviceId).setCustomerId(customerId).setDeviceOn(true).build();
    assertEquals(expectedState,testKit.getState());
  }

  private void switchOffDevice(DeviceEntityTestKit testKit,String deviceId, String customerId){
    EventSourcedResult<Empty> result = testKit.switchOffDevice(DeviceApi.SwitchOffDeviceRequest.newBuilder().setDeviceId(deviceId).build());

    DeviceDomain.DeviceSwitchedOff expectedEvent =  DeviceDomain.DeviceSwitchedOff.newBuilder().setDeviceId(deviceId).build();
    DeviceDomain.DeviceSwitchedOff event = result.getNextEventOfType(DeviceDomain.DeviceSwitchedOff.class);
    assertEquals(expectedEvent,event);

    DeviceDomain.DeviceState expectedState = DeviceDomain.DeviceState.newBuilder().setDeviceId(deviceId).setCustomerId(customerId).setDeviceOn(false).build();
    assertEquals(expectedState,testKit.getState());
  }

}
